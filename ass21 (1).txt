1) Write a JAVA code with the class named ‘acad’ and a method ‘main’. Hard code the program
with two integers and print the sum of those two.

import java.util.*;
class acad
{
public static void main(String[] args)
{
int n1=10;
int n2=15;
System.out.println(n1+n2);
}
}


2) Rewrite the above code, where, inputs are provided by the user at runtime and the output is printed

import java.util.*;
class acad
{
public static void main(String[] args)
{
Scanner sc=new Scanner(System.in);
int m=sc.nextInt();
int n=sc.nextInt();
int o=m+n;
System.out.println(o);
}
}

3) Write a program with a method name sum() that accepts two parameters from the user and
print the sum two numbers. 

import java.util.*;
class acad
{
 public static void sum()
{
Scanner sc=new Scanner(System.in);
int x=sc.nextInt();
int y=sc.nextInt();
System.out.println("First number is: "+x);
System.out.println("Second number is: "+y);
int z=x+y;
System.out.println("Sum is: "+z);

}
public static void main(String[] args)
{ 
sum();
}
}

4) Write a program to accepts two numbers from stdin and find all the odd as well as even
numbers present in between them.

import java.util.*;
class Oddeven
{

public static void main(String[] args)
{
int[] odd=new int[100];
int[] even=new int[100];
int x=0,y=0;
Scanner sc=new Scanner(System.in);
int i=sc.nextInt();
int n=sc.nextInt();
for(int j=i;j<=n;j++)
{
if(j%2==0)
{
even[x]=j;
x++;
}
else
{
odd[y]=j;
y++;
}
}
System.out.println("Odd numbers are:");
for(int k=0;k<odd.length;k++)
{
    if(odd[k]!=0)
System.out.println(odd[k]);
}
System.out.println("Even numbers are:");
for(int k=0;k<even.length;k++)
{
     if(even[k]!=0)
System.out.println(even[k]);
}
}
}

5.Joe is scared to go to school. When her dad asked the reason, Joe said she is unable to complete
the task given by her teacher. The task was to find the “first 10 multiples” of the number entered
from stdin. 

import java.util.*;
class Multiple
{

public static void main(String[] args)
{

Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int m=1;m<=10;m++)
{
    System.out.println(n+"*"+m+"="+(n*m));
}
}
}

6.Write a program consisting method sum() and demonstrate the concept of method
overloading using this method.

import java.util.*;
class Sum{  
static int sum(int x,int y)
{ 
return x+y;
}  
static int sum(int x,int y,int z)
{
return x+y+z;
}  
}  
class Overloading{  
public static void main(String[] args){  
System.out.println(Sum.sum(10,20));  
System.out.println(Sum.sum(30,1,8));  
}}  

In this example, the overloading method is sum. The number of parameters present in the sum
methods are 2 and 3. But the return type is integer in both the cases. So overloading methods
can have different number of arguments and the return type can be the same.


7. Can you overload a method with the same return type? Explain your answer with proper logic.

Yes, we can overload a method with same return type. Methods can have varying number of
arguments but the method name should be the same. Return type can be either same or different.
Example:
import java.util.*;
class Sum{  
static int sum(int x,int y)
{ 
return x+y;
}  
static int sum(int x,int y,int z)
{
return x+y+z;
}  
}  
class Overloading{  
public static void main(String[] args){  
System.out.println(Sum.sum(10,20));  
System.out.println(Sum.sum(30,1,8));  
}}  

In this example, the overloading method is sum. The number of parameters present in the sum
methods are 2 and 3. But the return type is integer in both the cases. So overloading methods
can have different number of arguments and the return type can be the same.


8. Write a program in java using Arrays that sorts the element in descending order.

import java.util.*;
class Sort
{

public static void main(String[] args)
{

Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
int a[]=new int[50];
for(int i=0;i<n;i++)
{
a[i]=sc.nextInt();
}
Arrays.sort(a);
for(int j=a.length-1;j>=0;j-- )
{
    if(a[j]!=0)
    System.out.println(a[j]);
}
}
}